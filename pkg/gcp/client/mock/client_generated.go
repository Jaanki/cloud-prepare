/*
Â© 2021 Red Hat, Inc. and others.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteFirewallRule mocks base method.
func (m *MockInterface) DeleteFirewallRule(projectID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallRule", projectID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewallRule indicates an expected call of DeleteFirewallRule.
func (mr *MockInterfaceMockRecorder) DeleteFirewallRule(projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallRule", reflect.TypeOf((*MockInterface)(nil).DeleteFirewallRule), projectID, name)
}

// GetFirewallRule mocks base method.
func (m *MockInterface) GetFirewallRule(projectID, name string) (*compute.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewallRule", projectID, name)
	ret0, _ := ret[0].(*compute.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRule indicates an expected call of GetFirewallRule.
func (mr *MockInterfaceMockRecorder) GetFirewallRule(projectID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRule", reflect.TypeOf((*MockInterface)(nil).GetFirewallRule), projectID, name)
}

// InsertFirewallRule mocks base method.
func (m *MockInterface) InsertFirewallRule(projectID string, rule *compute.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFirewallRule", projectID, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFirewallRule indicates an expected call of InsertFirewallRule.
func (mr *MockInterfaceMockRecorder) InsertFirewallRule(projectID, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFirewallRule", reflect.TypeOf((*MockInterface)(nil).InsertFirewallRule), projectID, rule)
}

// UpdateFirewallRule mocks base method.
func (m *MockInterface) UpdateFirewallRule(projectID, name string, rule *compute.Firewall) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirewallRule", projectID, name, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFirewallRule indicates an expected call of UpdateFirewallRule.
func (mr *MockInterfaceMockRecorder) UpdateFirewallRule(projectID, name, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirewallRule", reflect.TypeOf((*MockInterface)(nil).UpdateFirewallRule), projectID, name, rule)
}
